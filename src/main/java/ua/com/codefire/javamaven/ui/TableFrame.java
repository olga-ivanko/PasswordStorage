/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ua.com.codefire.javamaven.ui;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.IOUtils;
import ua.com.codefire.javamaven.DeleteApprovalListener;
import ua.com.codefire.javamaven.NewTargetListener;
import ua.com.codefire.javamaven.User;

/**
 *
 * @author homefulloflove
 */
public class TableFrame extends javax.swing.JFrame implements NewTargetListener, DeleteApprovalListener {

    private static final String SQL_CONNECTION_STRING = "jdbc:sqlite:database.sl3";
    private static final String SQL_INSERT_QUERY = "INSERT INTO storage VALUES (null, ?, ?, ?, ?, ?)";
    private static final String SQL_SELECT_QUERY = "SELECT * FROM storage";
    private static final String SQL_DELETE_QUERY = "DELETE FROM storage WHERE id = ?";
    private User currentUser;
    private boolean accessGranded;

    /**
     * Creates new form TableFrame
     */
    public TableFrame() {

        initComponents();
        setLocationRelativeTo(null);

        initDatabase();
        updateTableData();

    }

    public User getCurrentUser() {
        return currentUser;
    }

    public void setCurrentUser(User currentUser) {
        this.currentUser = currentUser;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTable = new javax.swing.JTable();
        jcbShowPasswords = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmEdit = new javax.swing.JMenu();
        jmiAdd = new javax.swing.JMenuItem();
        jmiDelete = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jtTable);

        jcbShowPasswords.setText("Show passwords");
        jcbShowPasswords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbShowPasswordsActionPerformed(evt);
            }
        });

        jmFile.setText("File");
        jMenuBar1.add(jmFile);

        jmEdit.setText("Edit");

        jmiAdd.setText("Add...");
        jmiAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddActionPerformed(evt);
            }
        });
        jmEdit.add(jmiAdd);

        jmiDelete.setText("Delete");
        jmiDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDeleteActionPerformed(evt);
            }
        });
        jmEdit.add(jmiDelete);

        jMenuBar1.add(jmEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jcbShowPasswords)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbShowPasswords)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddActionPerformed

        NewTargetFrame ntf = new NewTargetFrame();
        ntf.addListener(this);
        ntf.setLocationRelativeTo(this);
        ntf.setVisible(true);


    }//GEN-LAST:event_jmiAddActionPerformed

    private void jmiDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDeleteActionPerformed
        DeleteApprovalFrame daf = new DeleteApprovalFrame();
        daf.addListener(this);
        daf.setLocationRelativeTo(this);
        daf.setVisible(true);

    }//GEN-LAST:event_jmiDeleteActionPerformed

    private void jcbShowPasswordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbShowPasswordsActionPerformed
        if (jcbShowPasswords.isSelected()) {
            PasswordFrame pf = new PasswordFrame();
            pf.addListener(new PasswordFrameListener() {
                @Override
                public void accessAction(boolean granded, User user) {
                    accessGranded = granded;
                    updateTableData();
                }
            });
            pf.setVisible(true);
        } else {
            accessGranded = false;
            updateTableData();
        }
    }//GEN-LAST:event_jcbShowPasswordsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox jcbShowPasswords;
    private javax.swing.JMenu jmEdit;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenuItem jmiAdd;
    private javax.swing.JMenuItem jmiDelete;
    private javax.swing.JTable jtTable;
    // End of variables declaration//GEN-END:variables

    private void initDatabase() {

        try (Connection conn = DriverManager.getConnection(SQL_CONNECTION_STRING)) {
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();

            stmt.execute(IOUtils.toString(getClass().getResourceAsStream("/create.users.sql"), "UTF-8"));
            Savepoint sp = conn.setSavepoint("UsersCreated");
            try {
                stmt.execute(IOUtils.toString(getClass().getResourceAsStream("/create.storage.sql"), "UTF-8"));
            } catch (SQLException e) {
                System.out.println("roll back");
                conn.rollback(sp);
            }
            conn.commit();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(TableFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void targetAdded(String target, String username, String password) {
        try (Connection conn = DriverManager.getConnection(SQL_CONNECTION_STRING)) {
            PreparedStatement ps = conn.prepareStatement(SQL_INSERT_QUERY);
            ps.setString(1, target);
            ps.setString(2, username);
            ps.setString(3, password);
            ps.setString(4, DigestUtils.md5Hex(password));
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(TableFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        updateTableData();
    }

    private void updateTableData() {
        Vector columnNames = new Vector();
        columnNames.add("ID");
        columnNames.add("Target");
        columnNames.add("Username");
        columnNames.add("Password");
        columnNames.add("Hash");

        Vector data = new Vector();

        try (Connection conn = DriverManager.getConnection(SQL_CONNECTION_STRING)) {
            ResultSet rs = conn.createStatement().executeQuery(SQL_SELECT_QUERY);

            while (rs.next()) {
                Vector row = new Vector();
                row.add(rs.getInt(1));
                row.add(rs.getString(2));
                row.add(rs.getString(3));
                if (accessGranded) {
                    row.add(rs.getString(4));
                } else {
                    row.add(rs.getString(4).replaceAll(".+", "******"));
                }
                row.add(rs.getString(5));
                data.add(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(TableFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultTableModel dtm = new DefaultTableModel(data, columnNames);

        jtTable.setModel(dtm);

    }

    @Override
    public void deleteApproved() {
        int row = jtTable.getSelectedRow();
        int id = (int) jtTable.getValueAt(row, 0);
        try (Connection conn = DriverManager.getConnection(SQL_CONNECTION_STRING)) {
            PreparedStatement ps = conn.prepareStatement(SQL_DELETE_QUERY);
            ps.setString(1, String.valueOf(id));
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(TableFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateTableData();
    }

}
