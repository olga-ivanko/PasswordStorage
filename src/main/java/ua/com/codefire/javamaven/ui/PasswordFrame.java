/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ua.com.codefire.javamaven.ui;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.codec.digest.DigestUtils;
import ua.com.codefire.javamaven.User;

/**
 *
 * @author homefulloflove
 */
public class PasswordFrame extends javax.swing.JDialog {

    private static final String SQL_CONNECTION_STRING = "jdbc:sqlite:database.sl3";
    private List<PasswordFrameListener> listeners;
    private User userCredentials;
    private boolean existing;
    private static final String SQL_INSERT_USER_QUERY = "INSERT INTO users VALUES (null, ?, ?)";

    /**
     * Creates new form PasswordFrame
     */
    public PasswordFrame() {
        initComponents();

        listeners = new ArrayList<>();

        getRootPane().setDefaultButton(jbOk);
        setLocationRelativeTo(null);
        setModal(true);
    }

    public PasswordFrame(boolean newUserVisible) {
        initComponents();
        jbSignUp.setVisible(newUserVisible);

        listeners = new ArrayList<>();

        getRootPane().setDefaultButton(jbOk);
        setLocationRelativeTo(null);
        setModal(true);
    }

    public boolean addListener(PasswordFrameListener listener) {
        return listeners.add(listener);
    }

    public boolean removeListener(PasswordFrameListener listener) {
        return listeners.remove(listener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jlInfo = new javax.swing.JLabel();
        jlUsername = new javax.swing.JLabel();
        jtfUsername = new javax.swing.JTextField();
        jlPassword = new javax.swing.JLabel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jpMessage = new javax.swing.JPanel();
        jpfPassword = new javax.swing.JPasswordField();
        jbSignUp = new javax.swing.JButton();
        jlError = new javax.swing.JLabel();

        jPasswordField1.setText("jPasswordField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jlInfo.setText("Type your username and password.");

        jlUsername.setText("Username:");

        jlPassword.setText("Password:");

        jbOk.setText("Sign in");
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpMessageLayout = new javax.swing.GroupLayout(jpMessage);
        jpMessage.setLayout(jpMessageLayout);
        jpMessageLayout.setHorizontalGroup(
            jpMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 6, Short.MAX_VALUE)
        );
        jpMessageLayout.setVerticalGroup(
            jpMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jbSignUp.setText("Sign up");
        jbSignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSignUpActionPerformed(evt);
            }
        });

        jlError.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlError.setText(" ");
        jlError.setMaximumSize(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jlPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfUsername)
                            .addComponent(jpfPassword))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jlInfo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbSignUp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                                .addComponent(jbCancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbOk)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlInfo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlUsername)
                    .addComponent(jtfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPassword)
                    .addComponent(jpfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCancel)
                    .addComponent(jbOk)
                    .addComponent(jbSignUp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jlError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        for (PasswordFrameListener listener : listeners) {
            listener.accessAction(false, null);
        }
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        String username = jtfUsername.getText().trim();
        String password = String.valueOf(jpfPassword.getPassword());

        String hash = DigestUtils.md5Hex(password);
//        System.out.println(hash);

        userCredentials = null;

        try (Connection conn = DriverManager.getConnection(SQL_CONNECTION_STRING)) {
            PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM `users` WHERE `username` = ? AND `password` = ?");
            pstmt.setString(1, username);
            pstmt.setString(2, hash);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                existing = true;
                userCredentials = new User(rs.getInt("id"), username, hash);

                for (PasswordFrameListener listener : listeners) {
                    listener.accessAction(existing, userCredentials);
                }

                this.dispose();

            } else {
                wrongData();
                jbSignUp.setBackground(Color.green);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PasswordFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbSignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSignUpActionPerformed
        String username = jtfUsername.getText().trim();
        String password = String.valueOf(jpfPassword.getPassword());

        String hash = DigestUtils.md5Hex(password);

        try (Connection conn = DriverManager.getConnection(SQL_CONNECTION_STRING)) {
            PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM `users` WHERE `username` = ?");
            pstmt.setString(1, username);
            ResultSet rs = pstmt.executeQuery();

            if (!rs.next()) {
                pstmt = conn.prepareStatement(SQL_INSERT_USER_QUERY, Statement.RETURN_GENERATED_KEYS);
                pstmt.setString(1, username);
                pstmt.setString(2, hash);
                pstmt.executeUpdate();

                ResultSet rsKey = pstmt.getGeneratedKeys();
                if (rsKey.next()) {
                    existing = true;
                    userCredentials = new User(rsKey.getInt(1), username, hash);

                    for (PasswordFrameListener listener : listeners) {
                        listener.accessAction(existing, userCredentials);
                    }

                    this.dispose();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(PasswordFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jbSignUpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                PasswordFrame pf = new PasswordFrame();
                pf.addListener(new PasswordFrameListener() {
                    @Override
                    public void accessAction(boolean granded, User user) {
                        if (granded) {
                            TableFrame tf = new TableFrame(user);
                            tf.setLocationRelativeTo(pf);
                            tf.setVisible(true);
                        }
                    }
                });
                pf.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbSignUp;
    private javax.swing.JLabel jlError;
    private javax.swing.JLabel jlInfo;
    private javax.swing.JLabel jlPassword;
    private javax.swing.JLabel jlUsername;
    private javax.swing.JPanel jpMessage;
    private javax.swing.JPasswordField jpfPassword;
    private javax.swing.JTextField jtfUsername;
    // End of variables declaration//GEN-END:variables

    public void wrongData() {
        jlError.setText("Not correct username or password");
//        jtfUsername.setText("");
        jpfPassword.setText("");
    }

}
